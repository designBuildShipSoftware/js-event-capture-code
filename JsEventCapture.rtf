JavaScript Event Bubbling and Event Capturing
Tuesday‎, ‎September‎ ‎18‎, ‎2018

https://developer.mozilla.org/en-US/docs/Web/API/Event
Event
The Event interface represents any event which takes place in the DOM (Document Object Model) ; some are user-generated (such as mouse or keyboard events), while others are generated by APIs (such as events that indicate an animation has finished running, a video has been paused, and so forth). There are many types of events, some of which use other interfaces based on the main Event interface. Event itself contains the properties and methods which are common to all events.

https://www.w3schools.com/jsref/met_element_addeventlistener.asp
addEventListener() 
The addEventListener() method attaches an event handler to the specified element.
Tip: Use the document.addEventListener() method to attach an event handler to the document.
Syntax
element.addEventListener(event, function, useCapture) 
useCapture
Optional. A Boolean value that specifies whether the event should be executed in the capturing or in the bubbling phase. 
Possible values: 
true - The event handler is executed in the capturing phase
false- Default. The event handler is executed in the bubbling phase

https://stackoverflow.com/questions/4616694/what-is-event-bubbling-and-capturing
Event bubbling and capturing 
Event bubbling and capturing are two ways of event propagation in the HTML DOM API, when an event occurs in an element inside another element, and both elements have registered a handler for that event. The event propagation mode determines in which order the elements receive the event.
With bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements.
With capturing, the event is first captured by the outermost element and then propagated to the inner elements.

Code time #1

Why Event Capturing and bubbling? Why bother?
https://javascript.info/event-delegation
Capturing and bubbling allow us to implement one of most powerful event handling patterns called event delegation. The idea is that if we have a lot of elements handled in a similar way, then instead of assigning a handler to each of them – we put a single handler on their common ancestor.

Question #1:
document.getElementById("bigBox").addEventListener("click", logThis, false);
      document.getElementById("middleBox").addEventListener("click", logThis, true);
      document.getElementById("smallBox").addEventListener("click", logThis, true);

Propagation: the action of widely spreading and promoting an idea, theory, etc...
https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation
To prevent further propagation of the current event in the capturing and bubbling phases:
event.stopPropagation();

Code time #2. Uncomment, all default(false)

You can use if statement or other conditions to stop propagation in the middle

Question #2:
function logThis(e) {
      console.log(this.id);
      e.stopPropagation();
    }
    
    window.onload = function()
    {
      document.getElementById("bigBox").addEventListener("click", logThis, false);
      document.getElementById("middleBox").addEventListener("click", logThis, true);
      document.getElementById("smallBox").addEventListener("click", logThis, true);
    }
